O arquivo cassandra-topology.properties é usado no Apache Cassandra para definir a topologia da rede manualmente. Ele mapeia os IPs dos nós a datacenters e racks, permitindo que o Cassandra saiba como os nós estão organizados na infraestrutura. Isso é útil em clusters distribuídos, onde a replicação e a alta disponibilidade dependem da compreensão da topologia de rede.

O arquivo cassandra-topology.properties é usado no Apache Cassandra para definir a topologia da rede manualmente. Ele mapeia os IPs dos nós a datacenters e racks, permitindo que o Cassandra saiba como os nós estão organizados na infraestrutura. Isso é útil em clusters distribuídos, onde a replicação e a alta disponibilidade dependem da compreensão da topologia de rede.

Finalidade do Arquivo
Mapeamento de Nós para Datacenters e Racks:

Permite associar IPs a datacenters e racks manualmente.
Utilizado quando o snitch configurado no Cassandra depende dessa topologia.
Compatibilidade com o PropertyFileSnitch:

Este arquivo é necessário quando o PropertyFileSnitch é usado no cassandra.yaml.
Replicação e Distribuição de Dados:

Garante que os dados sejam replicados de forma eficiente, considerando datacenters e racks.

Estrutura do Arquivo
O arquivo segue uma estrutura simples baseada em chave-valor. Cada linha representa um mapeamento entre um IP ou um conjunto de IPs e um datacenter/rack.

Configurações Básicas
Mapeamento de IPs: Define o datacenter e o rack para IPs específicos.
# IP=Datacenter:Rack
192.168.1.1=DC1:RAC1
192.168.1.2=DC1:RAC2
192.168.2.1=DC2:RAC1

2.Configuração Padrão: Define o datacenter e rack padrão para IPs que não são explicitamente mapeados.
Formato: 
default=DC1:RAC1

Configuração com Exemplos
Exemplo 1: Cluster em Um Datacenter com Múltiplos Racks
Imagine um cluster com três nós no mesmo datacenter (DC1), mas em racks diferentes:

cassandra-topology.properties:
192.168.1.1=DC1:RAC1
192.168.1.2=DC1:RAC2
192.168.1.3=DC1:RAC3
default=DC1:RAC1

O nó 192.168.1.1 está no datacenter DC1 e no rack RAC1.
O nó 192.168.1.2 está no datacenter DC1 e no rack RAC2.
O nó 192.168.1.3 está no datacenter DC1 e no rack RAC3.

Exemplo 2: Cluster com Múltiplos Datacenters
Um ambiente com dois datacenters (DC1 e DC2), cada um com dois racks:
cassandra-topology.properties:
192.168.1.1=DC1:RAC1
192.168.1.2=DC1:RAC2
192.168.2.1=DC2:RAC1
192.168.2.2=DC2:RAC2
default=DC1:RAC1
192.168.1.1 e 192.168.1.2 estão no datacenter DC1, mas em racks diferentes (RAC1 e RAC2).
192.168.2.1 e 192.168.2.2 estão no datacenter DC2, também em racks diferentes.


Exemplo 3: Usando IPs por Intervalo
Em ambientes maiores, é possível mapear intervalos de IPs para um datacenter e rack.

cassandra-topology.properties:
192.168.1.=DC1:RAC1
192.168.2.=DC2:RAC1
default=DC1:RAC1
Qualquer IP que comece com 192.168.1. será atribuído ao datacenter DC1 e rack RAC1.
Qualquer IP que comece com 192.168.2. será atribuído ao datacenter DC2 e rack RAC1.

Como Funciona na Prática

Snitch Baseado em Propriedades:
O arquivo cassandra-topology.properties é utilizado apenas quando o PropertyFileSnitch está configurado como snitch no cassandra.yaml:
endpoint_snitch: PropertyFileSnitch
Mapeamento de Topologia:
Durante a inicialização, o Cassandra lê o arquivo e determina o datacenter e rack de cada nó com base no IP.
Estratégia de Replicação:
Se a estratégia de replicação NetworkTopologyStrategy estiver configurada, o Cassandra usará essas informações para distribuir as réplicas de maneira otimizada.
Fallback para Configuração Padrão:
Se um IP não estiver listado no arquivo, o Cassandra aplicará a configuração default.


Boas Práticas
Consistência nos Nomes:

Use nomes consistentes para datacenters e racks em todo o cluster.
Teste Antes de Produção:

Valide o arquivo em um ambiente de teste para garantir que os mapeamentos estão corretos.
Evitar Ambiguidade:

Certifique-se de que os IPs listados no arquivo não se sobrepõem, especialmente ao usar intervalos.
Backup e Controle de Versão:

Sempre faça backup do arquivo antes de editar e use controle de versão para rastrear alterações.

Conclusão
O arquivo cassandra-topology.properties oferece controle manual sobre a topologia do cluster Cassandra, permitindo mapear IPs para datacenters e racks de forma precisa. Ele é especialmente útil em ambientes estáticos ou onde o PropertyFileSnitch é necessário. Configurá-lo corretamente é essencial para garantir uma replicação eficiente e alta disponibilidade no Cassandra.






